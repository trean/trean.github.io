/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$e-mail-name: 'e-mail';
$e-mail-x: 0px;
$e-mail-y: 0px;
$e-mail-offset-x: 0px;
$e-mail-offset-y: 0px;
$e-mail-width: 32px;
$e-mail-height: 32px;
$e-mail-total-width: 96px;
$e-mail-total-height: 64px;
$e-mail-image: '../img/sprite.png';
$e-mail: (0px, 0px, 0px, 0px, 32px, 32px, 96px, 64px, '../img/sprite.png', 'e-mail', );
$fb-name: 'fb';
$fb-x: 32px;
$fb-y: 0px;
$fb-offset-x: -32px;
$fb-offset-y: 0px;
$fb-width: 32px;
$fb-height: 32px;
$fb-total-width: 96px;
$fb-total-height: 64px;
$fb-image: '../img/sprite.png';
$fb: (32px, 0px, -32px, 0px, 32px, 32px, 96px, 64px, '../img/sprite.png', 'fb', );
$github-name: 'github';
$github-x: 0px;
$github-y: 32px;
$github-offset-x: 0px;
$github-offset-y: -32px;
$github-width: 32px;
$github-height: 32px;
$github-total-width: 96px;
$github-total-height: 64px;
$github-image: '../img/sprite.png';
$github: (0px, 32px, 0px, -32px, 32px, 32px, 96px, 64px, '../img/sprite.png', 'github', );
$rss-name: 'rss';
$rss-x: 32px;
$rss-y: 32px;
$rss-offset-x: -32px;
$rss-offset-y: -32px;
$rss-width: 32px;
$rss-height: 32px;
$rss-total-width: 96px;
$rss-total-height: 64px;
$rss-image: '../img/sprite.png';
$rss: (32px, 32px, -32px, -32px, 32px, 32px, 96px, 64px, '../img/sprite.png', 'rss', );
$tw-name: 'tw';
$tw-x: 64px;
$tw-y: 0px;
$tw-offset-x: -64px;
$tw-offset-y: 0px;
$tw-width: 32px;
$tw-height: 32px;
$tw-total-width: 96px;
$tw-total-height: 64px;
$tw-image: '../img/sprite.png';
$tw: (64px, 0px, -64px, 0px, 32px, 32px, 96px, 64px, '../img/sprite.png', 'tw', );
$spritesheet-width: 96px;
$spritesheet-height: 64px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($e-mail, $fb, $github, $rss, $tw, );
$spritesheet: (96px, 64px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
